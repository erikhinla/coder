name: Docs Preview Link

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - 'docs/**'
  issue_comment:
    types: [created, edited]

# Define environment variables used throughout the workflow
env:
  DOCS_BASE_URL: 'https://coder.com/docs'
  PREVIEW_TIMEOUT_SECONDS: 120

jobs:
  verify-docs-changes:
    if: |
      (github.event_name == 'pull_request_target') ||
      (github.event_name == 'issue_comment' && (contains(github.event.comment.body, '/docs-preview') || contains(github.event.comment.body, '/docs-compare')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      docs_changed: ${{ steps.verify.outputs.docs_changed }}
      pr_number: ${{ steps.pr_info.outputs.pr_number }}
      branch_name: ${{ steps.pr_info.outputs.branch_name }}
      repo_owner: ${{ steps.pr_info.outputs.repo_owner }}
      is_fork: ${{ steps.pr_info.outputs.is_fork }}
      is_comment: ${{ steps.pr_info.outputs.is_comment }}
      skip: ${{ steps.pr_info.outputs.skip }}
      command_type: ${{ steps.check_command.outputs.command_type }}
    steps:
      - name: Get PR info
        id: pr_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
            REPO_OWNER="${{ github.event.pull_request.head.repo.owner.login }}"
            IS_FORK="${{ github.event.pull_request.head.repo.fork }}"
            IS_COMMENT="false"
            SKIP="false"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
            echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
            echo "is_comment=$IS_COMMENT" >> $GITHUB_OUTPUT
            echo "skip=$SKIP" >> $GITHUB_OUTPUT
          else
            # For comments, we need to fetch the PR information
            IS_COMMENT="true"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            # Check if this is a PR comment
            if [[ -z "${{ github.event.issue.pull_request }}" ]]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "Comment is not on a PR, skipping"
              exit 0
            fi
            echo "skip=false" >> $GITHUB_OUTPUT
            
            # Get PR details using GitHub API
            PR_DATA=$(gh api repos/${{ github.repository }}/pulls/$ISSUE_NUMBER --jq '.head.ref, .head.repo.owner.login, .head.repo.fork, .head.sha')
            BRANCH_NAME=$(echo "$PR_DATA" | head -1)
            REPO_OWNER=$(echo "$PR_DATA" | head -2 | tail -1)
            IS_FORK=$(echo "$PR_DATA" | head -3 | tail -1)
            SHA=$(echo "$PR_DATA" | tail -1)
            
            echo "pr_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
            echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
            echo "is_comment=$IS_COMMENT" >> $GITHUB_OUTPUT
            echo "sha=$SHA" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for command type
        if: github.event_name == 'issue_comment'
        id: check_command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          if [[ "$COMMENT" == *"/docs-compare"* ]]; then
            echo "command_type=compare" >> $GITHUB_OUTPUT
          else
            echo "command_type=preview" >> $GITHUB_OUTPUT
          fi

      # Only check out the DEFAULT branch (not the PR code) to verify changes are only in the docs folder
      - name: Check out base repository code
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Verify only docs files are changed
        id: verify
        run: |
          # Fetch but don't checkout the PR head
          if [[ "${{ steps.pr_info.outputs.is_fork }}" == "true" ]]; then
            FORK_REPO="${{ steps.pr_info.outputs.repo_owner }}/${GITHUB_REPOSITORY#*/}"
            echo "This is a fork PR from: $FORK_REPO"
            git remote add fork "https://github.com/$FORK_REPO.git"
            git fetch fork "${{ steps.pr_info.outputs.branch_name }}" --depth=1
            PR_REF="fork/${{ steps.pr_info.outputs.branch_name }}"
          else
            git fetch origin "${{ steps.pr_info.outputs.branch_name }}" --depth=1
            PR_REF="origin/${{ steps.pr_info.outputs.branch_name }}"
          fi
          
          # Check which files are modified without checking out the code
          CHANGED_FILES=$(git diff --name-only origin/main..$PR_REF)
          NON_DOCS_FILES=$(echo "$CHANGED_FILES" | grep -v "^docs/" || true)
          
          # Only allow changes to docs directory for preview link updates
          if [[ -z "$NON_DOCS_FILES" ]]; then
            echo "All changes are in the docs directory, proceeding safely."
            echo "docs_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: Changes outside the docs directory detected."
            echo "For security reasons, the docs preview link will not be added automatically."
            echo "docs_changed=false" >> $GITHUB_OUTPUT
            
            # List suspicious files changed outside of docs/ for security review
            echo "Files changed outside of docs/:"
            echo "$NON_DOCS_FILES"
          fi
      
      # Add a status check to show verification is in progress
      - name: Update PR status
        if: github.event_name == 'pull_request_target'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'pending',
              context: 'docs-preview/verification',
              description: 'Verifying documentation changes'
            });

  docs-preview:
    needs: verify-docs-changes
    if: needs.verify-docs-changes.outputs.docs_changed == 'true' && needs.verify-docs-changes.outputs.skip == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      preview_url: ${{ steps.create_preview_url.outputs.preview_url }}
      page_url: ${{ steps.find_changed_docs.outputs.page_url }}
      most_changed_file: ${{ steps.find_changed_docs.outputs.most_changed_file }}
      most_changed_path: ${{ steps.find_changed_docs.outputs.most_changed_path }}
      preview_ready: ${{ steps.check_preview.outputs.preview_ready }}
    steps:
      - name: Checkout base repository code
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Safely check out PR code (docs only)
        run: |
          BRANCH_NAME="${{ needs.verify-docs-changes.outputs.branch_name }}"
          IS_FORK="${{ needs.verify-docs-changes.outputs.is_fork }}"
          
          if [[ "$IS_FORK" == "true" ]]; then
            FORK_REPO="${{ needs.verify-docs-changes.outputs.repo_owner }}/${GITHUB_REPOSITORY#*/}"
            echo "Checking out docs from fork: $FORK_REPO branch: $BRANCH_NAME"
            git remote add fork "https://github.com/$FORK_REPO.git"
            git fetch fork
            
            # Create a new branch for docs changes only
            git checkout -b pr-docs-preview
            
            # Only check out docs files from the PR branch
            git checkout fork/$BRANCH_NAME -- docs/
          else
            echo "Checking out docs from branch: $BRANCH_NAME"
            git fetch origin $BRANCH_NAME
            
            # Create a new branch for docs changes only
            git checkout -b pr-docs-preview
            
            # Only check out docs files from the PR branch
            git checkout origin/$BRANCH_NAME -- docs/
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create preview URL
        id: create_preview_url
        run: |
          BRANCH_NAME="${{ needs.verify-docs-changes.outputs.branch_name }}"
          
          # URL encode the branch name for safety
          ENCODED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//%2F/g' | sed 's/+/%2B/g' | sed 's/ /%20/g' | sed 's/\./%2E/g' | sed 's/:/%3A/g')
          PREVIEW_URL="${{ env.DOCS_BASE_URL }}/@$ENCODED_BRANCH"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Find most changed docs
        id: find_changed_docs
        run: |
          BRANCH_NAME="${{ needs.verify-docs-changes.outputs.branch_name }}"
          IS_FORK="${{ needs.verify-docs-changes.outputs.is_fork }}"
          
          if [[ "$IS_FORK" == "true" ]]; then
            DIFF_TARGET="fork/$BRANCH_NAME"
          else
            DIFF_TARGET="origin/$BRANCH_NAME"
          fi
          
          CHANGED_DOCS=$(git diff --name-status origin/main..$DIFF_TARGET -- docs/ | sort -r)
          
          if [[ -z "$CHANGED_DOCS" ]]; then
            echo "No documentation changes found"
            MOST_CHANGED_FILE=""
            MOST_CHANGED_PATH=""
          else
            # Filter for the most significantly changed file (not deleted)
            MOST_CHANGED_FILE=$(echo "$CHANGED_DOCS" | grep -v "^D" | head -n 1 | awk '{print $2}')
            
            if [[ -z "$MOST_CHANGED_FILE" ]]; then
              # All files were deleted, take the first deleted file
              MOST_CHANGED_FILE=$(echo "$CHANGED_DOCS" | head -n 1 | awk '{print $2}')
              echo "All doc files were deleted. Using: $MOST_CHANGED_FILE"
              MOST_CHANGED_PATH=""
            else
              # Convert docs path to URL path
              MOST_CHANGED_PATH=$(echo "$MOST_CHANGED_FILE" | sed 's/^docs\///')
              MOST_CHANGED_PATH=$(echo "$MOST_CHANGED_PATH" | sed 's/\.md$//')
            fi
          fi
          
          # Create the specific page URL if we have a changed file
          if [[ -n "$MOST_CHANGED_PATH" ]]; then
            ENCODED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//%2F/g' | sed 's/+/%2B/g' | sed 's/ /%20/g' | sed 's/\./%2E/g' | sed 's/:/%3A/g')
            PAGE_URL="${{ env.DOCS_BASE_URL }}/@$ENCODED_BRANCH/$MOST_CHANGED_PATH"
          else
            PAGE_URL=""
          fi
          
          echo "most_changed_file=$MOST_CHANGED_FILE" >> $GITHUB_OUTPUT
          echo "most_changed_path=$MOST_CHANGED_PATH" >> $GITHUB_OUTPUT
          echo "page_url=$PAGE_URL" >> $GITHUB_OUTPUT

      - name: Wait for Vercel preview deployment with timeout
        id: check_preview
        run: |
          # Check if preview is accessible via HTTP with timeout
          ATTEMPT=0
          MAX_ATTEMPTS=6  # Reduced for performance
          PREVIEW_READY=false
          PREVIEW_URL="${{ steps.create_preview_url.outputs.preview_url }}"
          START_TIME=$(date +%s)
          MAX_DURATION=${{ env.PREVIEW_TIMEOUT_SECONDS }}
          
          # Start in parallel - don't wait for full timeout if not needed
          while (( ATTEMPT < MAX_ATTEMPTS )); do
            # Check if we've exceeded the timeout
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if (( ELAPSED_TIME >= MAX_DURATION )); then
              break
            fi
            
            # Try to fetch the URL with a short timeout
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 10 "$PREVIEW_URL" || echo "000")
            
            if [[ "$HTTP_STATUS" == "200" ]]; then
              PREVIEW_READY=true
              break
            else
              ATTEMPT=$((ATTEMPT+1))
              
              # Calculate remaining time and use it for backoff
              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
              REMAINING_TIME=$((MAX_DURATION - ELAPSED_TIME))
              
              # Use exponential backoff but cap at remaining time
              SLEEP_TIME=$((5 * ATTEMPT))  # Linear backoff (5, 10, 15) is more predictable
              if (( SLEEP_TIME > REMAINING_TIME )); then
                SLEEP_TIME=$REMAINING_TIME
              fi
              
              if (( SLEEP_TIME <= 0 || ATTEMPT >= MAX_ATTEMPTS )); then
                break
              fi
              
              sleep $SLEEP_TIME
            fi
          done
          
          echo "preview_ready=$PREVIEW_READY" >> $GITHUB_OUTPUT

      # Update the PR status check with the preview results
      - name: Update PR status
        if: github.event_name == 'pull_request_target'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previewReady = '${{ steps.check_preview.outputs.preview_ready }}' === 'true';
            const previewUrl = '${{ steps.create_preview_url.outputs.preview_url }}';
            
            const state = 'success';
            let description = 'Documentation preview is available';
            
            if (!previewReady) {
              description = 'Documentation preview is being deployed';
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              target_url: previewUrl,
              context: 'docs-preview/status',
              description: description
            });

  update-pr:
    needs: [verify-docs-changes, docs-preview]
    if: |
      needs.verify-docs-changes.outputs.docs_changed == 'true' && 
      needs.verify-docs-changes.outputs.skip == 'false' && 
      needs.verify-docs-changes.outputs.is_comment == 'false'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Update PR description
        run: |
          PR_NUMBER="${{ needs.verify-docs-changes.outputs.pr_number }}"
          PREVIEW_URL="${{ needs.docs-preview.outputs.preview_url }}"
          PREVIEW_READY="${{ needs.docs-preview.outputs.preview_ready }}"
          
          # Get current PR description
          PR_BODY=$(gh pr view $PR_NUMBER --json body -q .body -R ${{ github.repository }})
          
          PREVIEW_LINK="📖 [View documentation preview]($PREVIEW_URL)"
          
          if [[ "$PREVIEW_READY" == "false" ]]; then
            PREVIEW_LINK="$PREVIEW_LINK ⏱️ *Preview deployment may still be in progress*"
          fi
          
          # Check if PR already has a preview link
          if [[ "$PR_BODY" == *"View documentation preview"* ]]; then
            # Replace existing preview link line
            NEW_BODY=$(echo "$PR_BODY" | sed -E 's|📖 \[View documentation preview\]\([^)]+\)[^$]*$|'"$PREVIEW_LINK"'|')
          else
            # Append preview link to the end
            if [[ -n "$PR_BODY" ]]; then
              NEW_BODY="${PR_BODY}

$PREVIEW_LINK"
            else
              NEW_BODY="$PREVIEW_LINK"
            fi
          fi
          
          # Update PR description
          gh pr edit $PR_NUMBER --body "$NEW_BODY" -R ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  respond-to-comment:
    needs: [verify-docs-changes, docs-preview]
    if: |
      needs.verify-docs-changes.outputs.docs_changed == 'true' && 
      needs.verify-docs-changes.outputs.skip == 'false' && 
      needs.verify-docs-changes.outputs.is_comment == 'true'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Respond to comment
        run: |
          PR_NUMBER="${{ needs.verify-docs-changes.outputs.pr_number }}"
          PREVIEW_URL="${{ needs.docs-preview.outputs.preview_url }}"
          PAGE_URL="${{ needs.docs-preview.outputs.page_url }}"
          PREVIEW_READY="${{ needs.docs-preview.outputs.preview_ready }}"
          COMMAND_TYPE="${{ needs.verify-docs-changes.outputs.command_type }}"
          
          if [[ "$COMMAND_TYPE" == "compare" ]]; then
            # Handle docs-compare command
            BRANCH_NAME="${{ needs.verify-docs-changes.outputs.branch_name }}"
            MOST_CHANGED_FILE="${{ needs.docs-preview.outputs.most_changed_file }}"
            MOST_CHANGED_PATH="${{ needs.docs-preview.outputs.most_changed_path }}"
            
            if [[ -n "$MOST_CHANGED_PATH" ]]; then
              PRODUCTION_URL="${{ env.DOCS_BASE_URL }}/$MOST_CHANGED_PATH"
              
              RESPONSE="### Documentation Comparison 📖

Branch preview: [$BRANCH_NAME preview]($PREVIEW_URL)

| Version | Link |
|---------|------|
| This PR | [View $MOST_CHANGED_FILE]($PAGE_URL) |
| Production | [View current version]($PRODUCTION_URL) |"
            else
              RESPONSE="### Documentation Comparison 📖

Branch preview: [$BRANCH_NAME preview]($PREVIEW_URL)

No significant documentation changes found to compare."
            fi
          else
            # Handle docs-preview command
            if [[ -n "$PAGE_URL" ]]; then
              MOST_CHANGED_FILE="${{ needs.docs-preview.outputs.most_changed_file }}"
              
              RESPONSE="### Documentation Preview 📖

[View full documentation preview]($PREVIEW_URL)

Most changed file: [View $MOST_CHANGED_FILE]($PAGE_URL)"
            else
              RESPONSE="### Documentation Preview 📖

[View documentation preview]($PREVIEW_URL)"
            fi
          fi
          
          if [[ "$PREVIEW_READY" == "false" ]]; then
            RESPONSE="$RESPONSE

⏱️ *Preview deployment may still be in progress*"
          fi
          
          # Post comment
          gh pr comment $PR_NUMBER --body "$RESPONSE" -R ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs-security-check-failed:
    needs: verify-docs-changes
    if: needs.verify-docs-changes.outputs.docs_changed == 'false' && needs.verify-docs-changes.outputs.skip == 'false'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      statuses: write
    steps:
      - name: Update PR status
        if: github.event_name == 'pull_request_target'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'error',
              context: 'docs-preview/security',
              description: 'PR contains changes outside docs directory'
            });

      - name: Comment on security issue
        run: |
          PR_NUMBER="${{ needs.verify-docs-changes.outputs.pr_number }}"
          IS_COMMENT="${{ needs.verify-docs-changes.outputs.is_comment }}"
          
          if [[ "$IS_COMMENT" == "true" ]]; then
            RESPONSE="⚠️ **Security Check Failed**

This PR contains changes outside the docs directory. For security reasons, the automatic documentation preview is only available for PRs that modify files exclusively within the docs directory.

Please contact a repository maintainer if you need help with documentation previews for this PR."
            
            # Post comment
            gh pr comment $PR_NUMBER --body "$RESPONSE" -R ${{ github.repository }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}